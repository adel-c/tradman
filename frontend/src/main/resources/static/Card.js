import { S as SvelteElement, i as init, a as attribute_to_object, b as insert, f as flush, s as safe_not_equal, e as element, c as space, t as text, n as noop, d as src_url_equal, g as attr, h as append, j as set_data, k as detach } from './index-9968bab0.js';

/* src/Card.svelte generated by Svelte v3.59.2 */

function create_fragment(ctx) {
	let main;
	let div4;
	let div3;
	let img;
	let img_src_value;
	let t0;
	let div2;
	let div1;
	let div0;
	let h2;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let button;

	return {
		c() {
			main = element("main");
			div4 = element("div");
			div3 = element("div");
			img = element("img");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t1 = text(/*card_title*/ ctx[0]);
			t2 = space();
			p = element("p");
			t3 = text(/*card_desc*/ ctx[1]);
			t4 = space();
			button = element("button");
			button.textContent = "Do Something";
			this.c = noop;
			if (!src_url_equal(img.src, img_src_value = /*card_img*/ ctx[2])) attr(img, "src", img_src_value);
			attr(img, "alt", "My product");
			attr(div0, "class", "card-title");
			attr(div1, "class", "row");
			attr(div2, "class", "card-body");
			attr(div3, "class", "card");
			attr(div4, "class", "card-container");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, div4);
			append(div4, div3);
			append(div3, img);
			append(div3, t0);
			append(div3, div2);
			append(div2, div1);
			append(div1, div0);
			append(div0, h2);
			append(h2, t1);
			append(div2, t2);
			append(div2, p);
			append(p, t3);
			append(div2, t4);
			append(div2, button);
		},
		p(ctx, [dirty]) {
			if (dirty & /*card_img*/ 4 && !src_url_equal(img.src, img_src_value = /*card_img*/ ctx[2])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*card_title*/ 1) set_data(t1, /*card_title*/ ctx[0]);
			if (dirty & /*card_desc*/ 2) set_data(t3, /*card_desc*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(main);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { card_title, card_desc, card_img } = $$props;

	$$self.$$set = $$props => {
		if ('card_title' in $$props) $$invalidate(0, card_title = $$props.card_title);
		if ('card_desc' in $$props) $$invalidate(1, card_desc = $$props.card_desc);
		if ('card_img' in $$props) $$invalidate(2, card_img = $$props.card_img);
	};

	return [card_title, card_desc, card_img];
}

class Card extends SvelteElement {
	constructor(options) {
		super();
		const style = document.createElement('style');
		style.textContent = `.card{max-width:350px;border-radius:5px;box-shadow:0 4px 6px 0 #00000033;padding:0 0 10px 0}.card img{width:100%;height:auto}.card-body{padding:5px 10px}.card-body p{color:#575757;margin-bottom:20px;font-size:14px}`;
		this.shadowRoot.appendChild(style);

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{ card_title: 0, card_desc: 1, card_img: 2 },
			null
		);

		if (options) {
			if (options.target) {
				insert(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["card_title", "card_desc", "card_img"];
	}

	get card_title() {
		return this.$$.ctx[0];
	}

	set card_title(card_title) {
		this.$$set({ card_title });
		flush();
	}

	get card_desc() {
		return this.$$.ctx[1];
	}

	set card_desc(card_desc) {
		this.$$set({ card_desc });
		flush();
	}

	get card_img() {
		return this.$$.ctx[2];
	}

	set card_img(card_img) {
		this.$$set({ card_img });
		flush();
	}
}

customElements.define("my-card", Card);

export { Card as default };
